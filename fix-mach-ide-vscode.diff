diff --git a/python/mozbuild/mozbuild/backend/mach_commands.py b/python/mozbuild/mozbuild/backend/mach_commands.py
index 185c57d063b2..fe51a3e03a1c 100644
--- a/python/mozbuild/mozbuild/backend/mach_commands.py
+++ b/python/mozbuild/mozbuild/backend/mach_commands.py
@@ -33,76 +33,6 @@ from mozbuild.util import cpu_count
 def run(command_context, ide, no_interactive, args):
     interactive = not no_interactive
 
-    backend = None
-    if ide == "eclipse":
-        backend = "CppEclipse"
-    elif ide == "visualstudio":
-        backend = "VisualStudio"
-    elif ide == "vscode":
-        if not command_context.config_environment.is_artifact_build:
-            backend = "Clangd"
-
-    if ide == "eclipse" and not which("eclipse"):
-        command_context.log(
-            logging.ERROR,
-            "ide",
-            {},
-            "Eclipse CDT 8.4 or later must be installed in your PATH.",
-        )
-        command_context.log(
-            logging.ERROR,
-            "ide",
-            {},
-            "Download: http://www.eclipse.org/cdt/downloads.php",
-        )
-        return 1
-
-    if ide == "vscode":
-        rc = build_commands.configure(command_context)
-
-        if rc != 0:
-            return rc
-
-        # First install what we can through install manifests.
-        rc = command_context._run_make(
-            directory=command_context.topobjdir,
-            target="pre-export",
-            line_handler=None,
-        )
-        if rc != 0:
-            return rc
-
-        # Then build the rest of the build dependencies by running the full
-        # export target, because we can't do anything better.
-        for target in ("export", "pre-compile"):
-            rc = command_context._run_make(
-                directory=command_context.topobjdir,
-                target=target,
-                line_handler=None,
-            )
-            if rc != 0:
-                return rc
-    else:
-        # Here we refresh the whole build. 'build export' is sufficient here and is
-        # probably more correct but it's also nice having a single target to get a fully
-        # built and indexed project (gives a easy target to use before go out to lunch).
-        res = command_context._mach_context.commands.dispatch(
-            "build", command_context._mach_context
-        )
-        if res != 0:
-            return 1
-
-    if backend:
-        # Generate or refresh the IDE backend.
-        python = command_context.virtualenv_manager.python_path
-        config_status = os.path.join(command_context.topobjdir, "config.status")
-        args = [python, config_status, "--backend=%s" % backend]
-        res = command_context._run_command_in_objdir(
-            args=args, pass_thru=True, ensure_exit_code=False
-        )
-        if res != 0:
-            return 1
-
     if ide == "eclipse":
         eclipse_workspace_dir = get_eclipse_workspace_path(command_context)
         subprocess.check_call(["eclipse", "-data", eclipse_workspace_dir])
@@ -292,6 +222,9 @@ def setup_clangd_rust_in_vscode(command_context):
         "clangd" + command_context.config_environment.substs.get("BIN_SUFFIX", ""),
     )
 
+    import shutil
+    clangd_path = shutil.which("clangd")
+
     if not os.path.exists(clangd_path):
         command_context.log(
             logging.ERROR,
